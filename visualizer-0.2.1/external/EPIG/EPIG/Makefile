# Makefile.in generated by automake 1.7.9 from Makefile.am.
# external/EPIG/EPIG/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../../..

pkgdatadir = $(datadir)/visualizer
pkglibdir = $(libdir)/visualizer
pkgincludedir = $(includedir)/visualizer
top_builddir = ../../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i686-apple-darwin9.8.0
ACLOCAL = ${SHELL} /Users/athomps/netapp/codes/GP_MikeBrown/gp_force/visualizer-0.2.1/config/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /Users/athomps/netapp/codes/GP_MikeBrown/gp_force/visualizer-0.2.1/config/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /Users/athomps/netapp/codes/GP_MikeBrown/gp_force/visualizer-0.2.1/config/missing --run autoconf
AUTOHEADER = ${SHELL} /Users/athomps/netapp/codes/GP_MikeBrown/gp_force/visualizer-0.2.1/config/missing --run autoheader
AUTOMAKE = ${SHELL} /Users/athomps/netapp/codes/GP_MikeBrown/gp_force/visualizer-0.2.1/config/missing --run automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -I/usr/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = /bin/echo
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = gfortran
FFLAGS = -g -O2
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS =  -L/usr/lib
LIBOBJS = 
LIBS = -lz 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /Users/athomps/netapp/codes/GP_MikeBrown/gp_force/visualizer-0.2.1/config/missing --run makeinfo
OBJEXT = o
PACKAGE = visualizer
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 0.2.1
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = gfortran
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
bindir = ${exec_prefix}/bin
build = i686-apple-darwin9.8.0
build_alias = 
build_cpu = i686
build_os = darwin9.8.0
build_vendor = apple
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-apple-darwin9.8.0
host_alias = 
host_cpu = i686
host_os = darwin9.8.0
host_vendor = apple
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /Users/athomps/netapp/codes/GP_MikeBrown/gp_force/visualizer-0.2.1/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local/visualizer
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
noinst_LTLIBRARIES = libEPIG.la
INCLUDES = -I$(top_srcdir)/external/EPIG
libEPIG_la_SOURCES = \
CommonShapes.cpp \
CommonShapes.hpp \
EPIG.hpp \
Graphics.cpp \
Graphics.hpp \
Path.cpp \
Path.hpp \
Styles.cpp \
Styles.hpp \
Text.cpp \
Text.hpp \
Transforms.cpp \
Transforms.hpp \
Types.cpp \
Types.hpp \
XMLTree/Attribute.cpp \
XMLTree/Attribute.hpp \
XMLTree/Document.cpp \
XMLTree/Document.hpp \
XMLTree/Element.cpp \
XMLTree/Element.hpp \
XMLTree/Node.cpp \
XMLTree/Node.hpp \
XMLTree/String.cpp \
XMLTree/String.hpp \
XMLTree/XMLTree.hpp

subdir = external/EPIG/EPIG
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/visualizer/include/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)

libEPIG_la_LDFLAGS =
libEPIG_la_LIBADD =
am_libEPIG_la_OBJECTS = CommonShapes.lo Graphics.lo Path.lo Styles.lo \
	Text.lo Transforms.lo Types.lo Attribute.lo Document.lo \
	Element.lo Node.lo String.lo
libEPIG_la_OBJECTS = $(am_libEPIG_la_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)/visualizer/include
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/Attribute.Plo \
	./$(DEPDIR)/CommonShapes.Plo \
	./$(DEPDIR)/Document.Plo ./$(DEPDIR)/Element.Plo \
	./$(DEPDIR)/Graphics.Plo ./$(DEPDIR)/Node.Plo \
	./$(DEPDIR)/Path.Plo ./$(DEPDIR)/String.Plo \
	./$(DEPDIR)/Styles.Plo ./$(DEPDIR)/Text.Plo \
	./$(DEPDIR)/Transforms.Plo ./$(DEPDIR)/Types.Plo
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libEPIG_la_SOURCES)
DIST_COMMON = $(srcdir)/Makefile.in Makefile.am
SOURCES = $(libEPIG_la_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  external/EPIG/EPIG/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libEPIG.la: $(libEPIG_la_OBJECTS) $(libEPIG_la_DEPENDENCIES) 
	$(CXXLINK)  $(libEPIG_la_LDFLAGS) $(libEPIG_la_OBJECTS) $(libEPIG_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/Attribute.Plo
include ./$(DEPDIR)/CommonShapes.Plo
include ./$(DEPDIR)/Document.Plo
include ./$(DEPDIR)/Element.Plo
include ./$(DEPDIR)/Graphics.Plo
include ./$(DEPDIR)/Node.Plo
include ./$(DEPDIR)/Path.Plo
include ./$(DEPDIR)/String.Plo
include ./$(DEPDIR)/Styles.Plo
include ./$(DEPDIR)/Text.Plo
include ./$(DEPDIR)/Transforms.Plo
include ./$(DEPDIR)/Types.Plo

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

Attribute.o: XMLTree/Attribute.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Attribute.o -MD -MP -MF "$(DEPDIR)/Attribute.Tpo" \
	  -c -o Attribute.o `test -f 'XMLTree/Attribute.cpp' || echo '$(srcdir)/'`XMLTree/Attribute.cpp; \
	then mv -f "$(DEPDIR)/Attribute.Tpo" "$(DEPDIR)/Attribute.Po"; \
	else rm -f "$(DEPDIR)/Attribute.Tpo"; exit 1; \
	fi
#	source='XMLTree/Attribute.cpp' object='Attribute.o' libtool=no \
#	depfile='$(DEPDIR)/Attribute.Po' tmpdepfile='$(DEPDIR)/Attribute.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Attribute.o `test -f 'XMLTree/Attribute.cpp' || echo '$(srcdir)/'`XMLTree/Attribute.cpp

Attribute.obj: XMLTree/Attribute.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Attribute.obj -MD -MP -MF "$(DEPDIR)/Attribute.Tpo" \
	  -c -o Attribute.obj `if test -f 'XMLTree/Attribute.cpp'; then $(CYGPATH_W) 'XMLTree/Attribute.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/Attribute.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Attribute.Tpo" "$(DEPDIR)/Attribute.Po"; \
	else rm -f "$(DEPDIR)/Attribute.Tpo"; exit 1; \
	fi
#	source='XMLTree/Attribute.cpp' object='Attribute.obj' libtool=no \
#	depfile='$(DEPDIR)/Attribute.Po' tmpdepfile='$(DEPDIR)/Attribute.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Attribute.obj `if test -f 'XMLTree/Attribute.cpp'; then $(CYGPATH_W) 'XMLTree/Attribute.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/Attribute.cpp'; fi`

Attribute.lo: XMLTree/Attribute.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Attribute.lo -MD -MP -MF "$(DEPDIR)/Attribute.Tpo" \
	  -c -o Attribute.lo `test -f 'XMLTree/Attribute.cpp' || echo '$(srcdir)/'`XMLTree/Attribute.cpp; \
	then mv -f "$(DEPDIR)/Attribute.Tpo" "$(DEPDIR)/Attribute.Plo"; \
	else rm -f "$(DEPDIR)/Attribute.Tpo"; exit 1; \
	fi
#	source='XMLTree/Attribute.cpp' object='Attribute.lo' libtool=yes \
#	depfile='$(DEPDIR)/Attribute.Plo' tmpdepfile='$(DEPDIR)/Attribute.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Attribute.lo `test -f 'XMLTree/Attribute.cpp' || echo '$(srcdir)/'`XMLTree/Attribute.cpp

Document.o: XMLTree/Document.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Document.o -MD -MP -MF "$(DEPDIR)/Document.Tpo" \
	  -c -o Document.o `test -f 'XMLTree/Document.cpp' || echo '$(srcdir)/'`XMLTree/Document.cpp; \
	then mv -f "$(DEPDIR)/Document.Tpo" "$(DEPDIR)/Document.Po"; \
	else rm -f "$(DEPDIR)/Document.Tpo"; exit 1; \
	fi
#	source='XMLTree/Document.cpp' object='Document.o' libtool=no \
#	depfile='$(DEPDIR)/Document.Po' tmpdepfile='$(DEPDIR)/Document.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Document.o `test -f 'XMLTree/Document.cpp' || echo '$(srcdir)/'`XMLTree/Document.cpp

Document.obj: XMLTree/Document.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Document.obj -MD -MP -MF "$(DEPDIR)/Document.Tpo" \
	  -c -o Document.obj `if test -f 'XMLTree/Document.cpp'; then $(CYGPATH_W) 'XMLTree/Document.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/Document.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Document.Tpo" "$(DEPDIR)/Document.Po"; \
	else rm -f "$(DEPDIR)/Document.Tpo"; exit 1; \
	fi
#	source='XMLTree/Document.cpp' object='Document.obj' libtool=no \
#	depfile='$(DEPDIR)/Document.Po' tmpdepfile='$(DEPDIR)/Document.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Document.obj `if test -f 'XMLTree/Document.cpp'; then $(CYGPATH_W) 'XMLTree/Document.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/Document.cpp'; fi`

Document.lo: XMLTree/Document.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Document.lo -MD -MP -MF "$(DEPDIR)/Document.Tpo" \
	  -c -o Document.lo `test -f 'XMLTree/Document.cpp' || echo '$(srcdir)/'`XMLTree/Document.cpp; \
	then mv -f "$(DEPDIR)/Document.Tpo" "$(DEPDIR)/Document.Plo"; \
	else rm -f "$(DEPDIR)/Document.Tpo"; exit 1; \
	fi
#	source='XMLTree/Document.cpp' object='Document.lo' libtool=yes \
#	depfile='$(DEPDIR)/Document.Plo' tmpdepfile='$(DEPDIR)/Document.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Document.lo `test -f 'XMLTree/Document.cpp' || echo '$(srcdir)/'`XMLTree/Document.cpp

Element.o: XMLTree/Element.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Element.o -MD -MP -MF "$(DEPDIR)/Element.Tpo" \
	  -c -o Element.o `test -f 'XMLTree/Element.cpp' || echo '$(srcdir)/'`XMLTree/Element.cpp; \
	then mv -f "$(DEPDIR)/Element.Tpo" "$(DEPDIR)/Element.Po"; \
	else rm -f "$(DEPDIR)/Element.Tpo"; exit 1; \
	fi
#	source='XMLTree/Element.cpp' object='Element.o' libtool=no \
#	depfile='$(DEPDIR)/Element.Po' tmpdepfile='$(DEPDIR)/Element.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Element.o `test -f 'XMLTree/Element.cpp' || echo '$(srcdir)/'`XMLTree/Element.cpp

Element.obj: XMLTree/Element.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Element.obj -MD -MP -MF "$(DEPDIR)/Element.Tpo" \
	  -c -o Element.obj `if test -f 'XMLTree/Element.cpp'; then $(CYGPATH_W) 'XMLTree/Element.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/Element.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Element.Tpo" "$(DEPDIR)/Element.Po"; \
	else rm -f "$(DEPDIR)/Element.Tpo"; exit 1; \
	fi
#	source='XMLTree/Element.cpp' object='Element.obj' libtool=no \
#	depfile='$(DEPDIR)/Element.Po' tmpdepfile='$(DEPDIR)/Element.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Element.obj `if test -f 'XMLTree/Element.cpp'; then $(CYGPATH_W) 'XMLTree/Element.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/Element.cpp'; fi`

Element.lo: XMLTree/Element.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Element.lo -MD -MP -MF "$(DEPDIR)/Element.Tpo" \
	  -c -o Element.lo `test -f 'XMLTree/Element.cpp' || echo '$(srcdir)/'`XMLTree/Element.cpp; \
	then mv -f "$(DEPDIR)/Element.Tpo" "$(DEPDIR)/Element.Plo"; \
	else rm -f "$(DEPDIR)/Element.Tpo"; exit 1; \
	fi
#	source='XMLTree/Element.cpp' object='Element.lo' libtool=yes \
#	depfile='$(DEPDIR)/Element.Plo' tmpdepfile='$(DEPDIR)/Element.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Element.lo `test -f 'XMLTree/Element.cpp' || echo '$(srcdir)/'`XMLTree/Element.cpp

Node.o: XMLTree/Node.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Node.o -MD -MP -MF "$(DEPDIR)/Node.Tpo" \
	  -c -o Node.o `test -f 'XMLTree/Node.cpp' || echo '$(srcdir)/'`XMLTree/Node.cpp; \
	then mv -f "$(DEPDIR)/Node.Tpo" "$(DEPDIR)/Node.Po"; \
	else rm -f "$(DEPDIR)/Node.Tpo"; exit 1; \
	fi
#	source='XMLTree/Node.cpp' object='Node.o' libtool=no \
#	depfile='$(DEPDIR)/Node.Po' tmpdepfile='$(DEPDIR)/Node.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Node.o `test -f 'XMLTree/Node.cpp' || echo '$(srcdir)/'`XMLTree/Node.cpp

Node.obj: XMLTree/Node.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Node.obj -MD -MP -MF "$(DEPDIR)/Node.Tpo" \
	  -c -o Node.obj `if test -f 'XMLTree/Node.cpp'; then $(CYGPATH_W) 'XMLTree/Node.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/Node.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Node.Tpo" "$(DEPDIR)/Node.Po"; \
	else rm -f "$(DEPDIR)/Node.Tpo"; exit 1; \
	fi
#	source='XMLTree/Node.cpp' object='Node.obj' libtool=no \
#	depfile='$(DEPDIR)/Node.Po' tmpdepfile='$(DEPDIR)/Node.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Node.obj `if test -f 'XMLTree/Node.cpp'; then $(CYGPATH_W) 'XMLTree/Node.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/Node.cpp'; fi`

Node.lo: XMLTree/Node.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Node.lo -MD -MP -MF "$(DEPDIR)/Node.Tpo" \
	  -c -o Node.lo `test -f 'XMLTree/Node.cpp' || echo '$(srcdir)/'`XMLTree/Node.cpp; \
	then mv -f "$(DEPDIR)/Node.Tpo" "$(DEPDIR)/Node.Plo"; \
	else rm -f "$(DEPDIR)/Node.Tpo"; exit 1; \
	fi
#	source='XMLTree/Node.cpp' object='Node.lo' libtool=yes \
#	depfile='$(DEPDIR)/Node.Plo' tmpdepfile='$(DEPDIR)/Node.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Node.lo `test -f 'XMLTree/Node.cpp' || echo '$(srcdir)/'`XMLTree/Node.cpp

String.o: XMLTree/String.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT String.o -MD -MP -MF "$(DEPDIR)/String.Tpo" \
	  -c -o String.o `test -f 'XMLTree/String.cpp' || echo '$(srcdir)/'`XMLTree/String.cpp; \
	then mv -f "$(DEPDIR)/String.Tpo" "$(DEPDIR)/String.Po"; \
	else rm -f "$(DEPDIR)/String.Tpo"; exit 1; \
	fi
#	source='XMLTree/String.cpp' object='String.o' libtool=no \
#	depfile='$(DEPDIR)/String.Po' tmpdepfile='$(DEPDIR)/String.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o String.o `test -f 'XMLTree/String.cpp' || echo '$(srcdir)/'`XMLTree/String.cpp

String.obj: XMLTree/String.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT String.obj -MD -MP -MF "$(DEPDIR)/String.Tpo" \
	  -c -o String.obj `if test -f 'XMLTree/String.cpp'; then $(CYGPATH_W) 'XMLTree/String.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/String.cpp'; fi`; \
	then mv -f "$(DEPDIR)/String.Tpo" "$(DEPDIR)/String.Po"; \
	else rm -f "$(DEPDIR)/String.Tpo"; exit 1; \
	fi
#	source='XMLTree/String.cpp' object='String.obj' libtool=no \
#	depfile='$(DEPDIR)/String.Po' tmpdepfile='$(DEPDIR)/String.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o String.obj `if test -f 'XMLTree/String.cpp'; then $(CYGPATH_W) 'XMLTree/String.cpp'; else $(CYGPATH_W) '$(srcdir)/XMLTree/String.cpp'; fi`

String.lo: XMLTree/String.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT String.lo -MD -MP -MF "$(DEPDIR)/String.Tpo" \
	  -c -o String.lo `test -f 'XMLTree/String.cpp' || echo '$(srcdir)/'`XMLTree/String.cpp; \
	then mv -f "$(DEPDIR)/String.Tpo" "$(DEPDIR)/String.Plo"; \
	else rm -f "$(DEPDIR)/String.Tpo"; exit 1; \
	fi
#	source='XMLTree/String.cpp' object='String.lo' libtool=yes \
#	depfile='$(DEPDIR)/String.Plo' tmpdepfile='$(DEPDIR)/String.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o String.lo `test -f 'XMLTree/String.cpp' || echo '$(srcdir)/'`XMLTree/String.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES)

installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am info info-am install \
	install-am install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool pdf \
	pdf-am ps ps-am tags uninstall uninstall-am uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
